---
import { ThemeProvider } from "@/components/theme-provider";
import { ModeToggle } from "@/components/mode-toggle";
import '@/style/globals.scss'
interface Props {
  title: string;
}

const { title } = Astro.props;
---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body>
    <ThemeProvider client:only="react" defaultTheme="dark" storageKey="vite-ui-theme">
        <div class="flex w-full justify-end p-4">
            <div class="self-center px-4">
              {import.meta.env.NODE_ENV === "development" && (
                <div class="self-center">
                <a
                    href="/admin/index.html"
                    target="_blank"
                    rel="noopener noreferrer"
                    class="underline"
                  >
                    Admin
                  </a>
                </div>
              )}
            </div>
            <ModeToggle client:load />
      </div>
      <slot />
    </ThemeProvider>
  </body>
</html>

<script is:inline>
  const getThemePreference = () => {
    if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
      return localStorage.getItem("theme");
    }
    return window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light";
  };
  const isDark = getThemePreference() === "dark";
  document.documentElement.classList[isDark ? "add" : "remove"]("dark");

  if (typeof localStorage !== "undefined") {
    const observer = new MutationObserver(() => {
      const isDark = document.documentElement.classList.contains("dark");
      localStorage.setItem("theme", isDark ? "dark" : "light");
    });
    observer.observe(document.documentElement, { attributes: true, attributeFilter: ["class"] });
  }
</script>